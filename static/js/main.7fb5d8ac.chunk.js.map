{"version":3,"sources":["App/hooks/useFormInput.js","App/components/Feed/FeedForm/index.js","App/components/Feed/FeedPost/index.js","App/components/Feed/index.js","App/index.js","serviceWorker.js","index.js"],"names":["useFormInput","initialValue","_useState","useState","_useState2","Object","slicedToArray","value","setValue","handleChange","e","target","FeedInput","_ref","addIdlessPost","urlInput","titleInput","react_default","a","createElement","className","onSubmit","preventDefault","idlessPost","url","title","type","onChange","placeholder","FeedPost","src","alt","Feed","posts","setPosts","Feed_FeedForm","post","objectSpread","id","uniqueId","produce","prevPostsDraft","unshift","map","Feed_FeedPost","key","App","components_Feed","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAYeA,MAVf,SAAsBC,GAAc,IAAAC,EACNC,mBAASF,GADHG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBK,EADyBH,EAAA,GAClBI,EADkBJ,EAAA,GAOhC,MAAO,CAAEK,aAJT,SAAsBC,GAClBF,EAASE,EAAEC,OAAOJ,QAGCC,WAAUD,gBC2BtBK,MA9Bf,SAAAC,GAAsC,IAAjBC,EAAiBD,EAAjBC,cAEXC,EAAWf,EAAa,IACxBgB,EAAahB,EAAa,IAgBhC,OACIiB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAWC,SAf/B,SAAsBX,GAClBA,EAAEY,iBAEF,IAAMC,EAAa,CACfC,IAAKT,EAASR,MACdkB,MAAOT,EAAWT,OAGtBO,EAAcS,GAEdR,EAASP,SAAS,IAClBQ,EAAWR,SAAS,MAKpBS,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOnB,MAAOQ,EAASR,MAAOoB,SAAUZ,EAASN,aAAcmB,YAAY,oBACnFX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,yBAAyBM,KAAK,OAAOnB,MAAOS,EAAWT,MAAOoB,SAAUX,EAAWP,aAAcmB,YAAY,UAC9HX,EAAAC,EAAAC,cAAA,UAAQO,KAAK,UAAb,qBCjBDG,MATf,SAAAhB,GAAkC,IAAdY,EAAcZ,EAAdY,MAAOD,EAAOX,EAAPW,IACvB,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBK,GACnCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBU,IAAKN,EAAKO,IAAI,aCsB5CC,MArBf,WAAgB,IAAA9B,EACcC,mBAAS,IADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACL+B,EADK7B,EAAA,GACE8B,EADF9B,EAAA,GAaZ,OACIa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACgB,EAAD,CAAUrB,cAZlB,SAAuBS,GACnB,IAAMa,EAAI/B,OAAAgC,EAAA,EAAAhC,CAAA,CACNiC,GAAIC,mBAAS,SACVhB,GAEPW,EAASM,YAAQ,SAAAC,GACbA,EAAeC,QAAQN,SAOrBH,EAAMU,IAAI,SAAAP,GAAI,OAAInB,EAAAC,EAAAC,cAACyB,EAAD,CAAUC,IAAKT,EAAKE,GAAIb,MAAOW,EAAKX,MAAOD,IAAKY,EAAKZ,gBCXtEsB,MARf,WACI,OACI7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC4B,EAAD,QCGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7fb5d8ac.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nfunction useFormInput(initialValue) {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    function handleChange(e) {\r\n        setValue(e.target.value);\r\n    }\r\n\r\n    return { handleChange, setValue, value };\r\n}\r\n\r\nexport default useFormInput;","import React from 'react';\r\n\r\nimport useFormInput from '../../../hooks/useFormInput.js';\r\n\r\nimport './index.css';\r\n\r\nfunction FeedInput({ addIdlessPost }) {\r\n\r\n    const urlInput = useFormInput('')\r\n    const titleInput = useFormInput('');\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const idlessPost = {\r\n            url: urlInput.value,\r\n            title: titleInput.value\r\n        };\r\n\r\n        addIdlessPost(idlessPost);\r\n\r\n        urlInput.setValue('');\r\n        titleInput.setValue('');\r\n    }\r\n\r\n    return (\r\n        <form className=\"FeedForm\" onSubmit={handleSubmit}>\r\n        <input type=\"text\" value={urlInput.value} onChange={urlInput.handleChange} placeholder=\"Enter Image URL\" /> \r\n            <div className=\"FeedFormLastRow\">\r\n                <input className=\"FeedFormLastRow__input\" type=\"text\" value={titleInput.value} onChange={titleInput.handleChange} placeholder=\"Title\" />\r\n                <button type=\"submit\">New Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FeedInput;","import React from 'react';\r\n\r\nimport './index.css';\r\n\r\nfunction FeedPost({ title, url }) {\r\n    return (\r\n        <div className=\"FeedPost\">\r\n            <div className=\"FeedPost__title\">{ title }</div>\r\n            <img className=\"FeedPost__image\" src={url} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FeedPost;","import React, { useState } from 'react';\r\nimport produce from 'immer';\r\nimport { uniqueId } from 'lodash';\r\n\r\nimport FeedForm from './FeedForm';\r\nimport FeedPost from './FeedPost';\r\n\r\nimport './index.css';\r\n\r\nfunction Feed() {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    function addIdlessPost(idlessPost) {\r\n        const post = {\r\n            id: uniqueId('post'),\r\n            ...idlessPost\r\n        };\r\n        setPosts(produce(prevPostsDraft => {\r\n            prevPostsDraft.unshift(post);\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <div className=\"Feed\">\r\n            <FeedForm addIdlessPost={addIdlessPost} />\r\n            { posts.map(post => <FeedPost key={post.id} title={post.title} url={post.url} />) }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed;","import React from 'react';\r\n\r\nimport Feed from './components/Feed';\r\n\r\nimport './index.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Feed />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}